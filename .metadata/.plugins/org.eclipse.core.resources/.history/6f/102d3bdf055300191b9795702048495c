package lispInterpreter.Tokens;

import lispInterpreter.lexicalEnvironment.LexEnv;

public class Atom implements Expression {
	Object val;

	public Atom(String val) {
		try {
			this.val = Integer.parseInt(val);
		} catch (NumberFormatException e1) {
			try {
				this.val = Float.parseFloat(val);
			} catch (NumberFormatException e2) {
				this.val = val;
			}
		}
	}

	@Override
	public Expression eval() throws IllegalArgumentException {
		// TODO Auto-generated method stub
		Expression rtrn = thus;
		if (val instanceof String) {
			rtrn = LexEnv.getSymbol((String) val);
			if (rtrn == null) {
				rtrn = LexEnv.getValue((String) val);
			}
//			if (rtrn == null) {
//				throw new IllegalArgumentException("No variable " + (String) val + " found");
//			}
			
		}
		

		return this;
	}

	public Object getVal() {
		return val;
	}
}
